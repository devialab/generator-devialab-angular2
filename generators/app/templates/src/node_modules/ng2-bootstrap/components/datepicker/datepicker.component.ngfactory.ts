/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/datepicker/datepicker.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/forms/src/directives/ng_model';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/forms/src/directives/control_container';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
import * as import12 from '@angular/core/src/linker/query_list';
import * as import13 from './datepicker-inner.component.ngfactory';
import * as import14 from './daypicker.component.ngfactory';
import * as import15 from './monthpicker.component.ngfactory';
import * as import16 from './yearpicker.component.ngfactory';
import * as import17 from 'ng2-bootstrap/components/datepicker/daypicker.component';
import * as import18 from 'ng2-bootstrap/components/datepicker/monthpicker.component';
import * as import19 from 'ng2-bootstrap/components/datepicker/yearpicker.component';
import * as import20 from 'ng2-bootstrap/components/datepicker/datepicker-inner.component';
export class Wrapper_DatePickerComponent {
  context:import0.DatePickerComponent;
  changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  constructor(p0:any) {
    this.changed = false;
    this.context = new import0.DatePickerComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
  }
  check_datepickerMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.datepickerMode = currValue;
      this._expr_0 = currValue;
    }
  }
  check_initDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this.changed = true;
      this.context.initDate = currValue;
      this._expr_1 = currValue;
    }
  }
  check_minDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this.changed = true;
      this.context.minDate = currValue;
      this._expr_2 = currValue;
    }
  }
  check_maxDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this.changed = true;
      this.context.maxDate = currValue;
      this._expr_3 = currValue;
    }
  }
  check_minMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this.changed = true;
      this.context.minMode = currValue;
      this._expr_4 = currValue;
    }
  }
  check_maxMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this.changed = true;
      this.context.maxMode = currValue;
      this._expr_5 = currValue;
    }
  }
  check_showWeeks(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this.changed = true;
      this.context.showWeeks = currValue;
      this._expr_6 = currValue;
    }
  }
  check_formatDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this.changed = true;
      this.context.formatDay = currValue;
      this._expr_7 = currValue;
    }
  }
  check_formatMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this.changed = true;
      this.context.formatMonth = currValue;
      this._expr_8 = currValue;
    }
  }
  check_formatYear(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this.changed = true;
      this.context.formatYear = currValue;
      this._expr_9 = currValue;
    }
  }
  check_formatDayHeader(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this.changed = true;
      this.context.formatDayHeader = currValue;
      this._expr_10 = currValue;
    }
  }
  check_formatDayTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this.changed = true;
      this.context.formatDayTitle = currValue;
      this._expr_11 = currValue;
    }
  }
  check_formatMonthTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this.changed = true;
      this.context.formatMonthTitle = currValue;
      this._expr_12 = currValue;
    }
  }
  check_startingDay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this.changed = true;
      this.context.startingDay = currValue;
      this._expr_13 = currValue;
    }
  }
  check_yearRange(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this.changed = true;
      this.context.yearRange = currValue;
      this._expr_14 = currValue;
    }
  }
  check_onlyCurrentMonth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this.changed = true;
      this.context.onlyCurrentMonth = currValue;
      this._expr_15 = currValue;
    }
  }
  check_shortcutPropagation(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this.changed = true;
      this.context.shortcutPropagation = currValue;
      this._expr_16 = currValue;
    }
  }
  check_customClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this.changed = true;
      this.context.customClass = currValue;
      this._expr_17 = currValue;
    }
  }
  check_monthColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this.changed = true;
      this.context.monthColLimit = currValue;
      this._expr_18 = currValue;
    }
  }
  check_yearColLimit(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this.changed = true;
      this.context.yearColLimit = currValue;
      this._expr_19 = currValue;
    }
  }
  check_dateDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this.changed = true;
      this.context.dateDisabled = currValue;
      this._expr_20 = currValue;
    }
  }
  check_activeDate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this.changed = true;
      this.context.activeDate = currValue;
      this._expr_21 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_DatePickerComponent_Host:import4.RenderComponentType = (null as any);
class _View_DatePickerComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _NgModel_0_4:import6.NgModel;
  _DatePickerComponent_0_5:Wrapper_DatePickerComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_DatePickerComponent_Host0,renderType_DatePickerComponent_Host,import8.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'datepicker',new import2.InlineArray2(2,'ngModel',''),rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_DatePickerComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._NgModel_0_4 = new import6.NgModel(this.parentInjector.get(import9.ControlContainer,(null as any)),(null as any),(null as any),(null as any));
    this._DatePickerComponent_0_5 = new Wrapper_DatePickerComponent(this._NgModel_0_4);
    this._appEl_0.initComponent(this._DatePickerComponent_0_5.context,([] as any[]),compView_0);
    compView_0.create(this._DatePickerComponent_0_5.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.NgModel) && (0 === requestNodeIndex))) { return this._NgModel_0_4; }
    if (((token === import0.DatePickerComponent) && (0 === requestNodeIndex))) { return this._DatePickerComponent_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DatePickerComponent_0_5.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._DatePickerComponent_0_5.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._NgModel_0_4.ngOnDestroy();
  }
}
function viewFactory_DatePickerComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_DatePickerComponent_Host === (null as any))) { (renderType_DatePickerComponent_Host = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_DatePickerComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const DatePickerComponentNgFactory:import11.ComponentFactory<import0.DatePickerComponent> = new import11.ComponentFactory<import0.DatePickerComponent>('datepicker[ngModel]',viewFactory_DatePickerComponent_Host0,import0.DatePickerComponent);
const styles_DatePickerComponent:any[] = ([] as any[]);
var renderType_DatePickerComponent:import4.RenderComponentType = (null as any);
class _View_DatePickerComponent0 extends import3.AppView<import0.DatePickerComponent> {
  _viewQuery_DatePickerInnerComponent_0:import12.QueryList<any>;
  _text_0:any;
  _el_1:any;
  /*private*/ _appEl_1:import5.AppElement;
  _DatePickerInnerComponent_1_4:import13.Wrapper_DatePickerInnerComponent;
  _text_2:any;
  _el_3:any;
  /*private*/ _appEl_3:import5.AppElement;
  _DayPickerComponent_3_4:import14.Wrapper_DayPickerComponent;
  _text_4:any;
  _el_5:any;
  /*private*/ _appEl_5:import5.AppElement;
  _MonthPickerComponent_5_4:import15.Wrapper_MonthPickerComponent;
  _text_6:any;
  _el_7:any;
  /*private*/ _appEl_7:import5.AppElement;
  _YearPickerComponent_7_4:import16.Wrapper_YearPickerComponent;
  _text_8:any;
  _text_9:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement) {
    super(_View_DatePickerComponent0,renderType_DatePickerComponent,import8.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._viewQuery_DatePickerInnerComponent_0 = new import12.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import2.createRenderElement(this.renderer,parentRenderNode,'datepicker-inner',import2.EMPTY_INLINE_ARRAY,(null as any));
    this._appEl_1 = new import5.AppElement(1,(null as any),this,this._el_1);
    var compView_1:any = import13.viewFactory_DatePickerInnerComponent0(this.viewUtils,this.injector(1),this._appEl_1);
    this._DatePickerInnerComponent_1_4 = new import13.Wrapper_DatePickerInnerComponent();
    this._appEl_1.initComponent(this._DatePickerInnerComponent_1_4.context,([] as any[]),compView_1);
    this._text_2 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_3 = import2.createRenderElement(this.renderer,(null as any),'daypicker',new import2.InlineArray2(2,'tabindex','0'),(null as any));
    this._appEl_3 = new import5.AppElement(3,1,this,this._el_3);
    var compView_3:any = import14.viewFactory_DayPickerComponent0(this.viewUtils,this.injector(3),this._appEl_3);
    this._DayPickerComponent_3_4 = new import14.Wrapper_DayPickerComponent(this._DatePickerInnerComponent_1_4.context);
    this._appEl_3.initComponent(this._DayPickerComponent_3_4.context,([] as any[]),compView_3);
    compView_3.create(this._DayPickerComponent_3_4.context,([] as any[]),(null as any));
    this._text_4 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_5 = import2.createRenderElement(this.renderer,(null as any),'monthpicker',new import2.InlineArray2(2,'tabindex','0'),(null as any));
    this._appEl_5 = new import5.AppElement(5,1,this,this._el_5);
    var compView_5:any = import15.viewFactory_MonthPickerComponent0(this.viewUtils,this.injector(5),this._appEl_5);
    this._MonthPickerComponent_5_4 = new import15.Wrapper_MonthPickerComponent(this._DatePickerInnerComponent_1_4.context);
    this._appEl_5.initComponent(this._MonthPickerComponent_5_4.context,([] as any[]),compView_5);
    compView_5.create(this._MonthPickerComponent_5_4.context,([] as any[]),(null as any));
    this._text_6 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_7 = import2.createRenderElement(this.renderer,(null as any),'yearpicker',new import2.InlineArray2(2,'tabindex','0'),(null as any));
    this._appEl_7 = new import5.AppElement(7,1,this,this._el_7);
    var compView_7:any = import16.viewFactory_YearPickerComponent0(this.viewUtils,this.injector(7),this._appEl_7);
    this._YearPickerComponent_7_4 = new import16.Wrapper_YearPickerComponent(this._DatePickerInnerComponent_1_4.context);
    this._appEl_7.initComponent(this._YearPickerComponent_7_4.context,([] as any[]),compView_7);
    compView_7.create(this._YearPickerComponent_7_4.context,([] as any[]),(null as any));
    this._text_8 = this.renderer.createText((null as any),'\n    ',(null as any));
      compView_1.create(this._DatePickerInnerComponent_1_4.context,[([] as any[]).concat([
        this._text_2,
        this._el_3,
        this._text_4,
        this._el_5,
        this._text_6,
        this._el_7,
        this._text_8
      ]
    )],(null as any));
    this._text_9 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_1,'update',this.eventHandler(this._handle_update_1_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_1,'selectionDone',this.eventHandler(this._handle_selectionDone_1_1.bind(this)));
    const subscription_0:any = this._DatePickerInnerComponent_1_4.context.selectionDone.subscribe(this.eventHandler(this._handle_selectionDone_1_1.bind(this)));
    const subscription_1:any = this._DatePickerInnerComponent_1_4.context.update.subscribe(this.eventHandler(this._handle_update_1_0.bind(this)));
    this._viewQuery_DatePickerInnerComponent_0.reset([this._DatePickerInnerComponent_1_4.context]);
    this.context._datePicker = this._viewQuery_DatePickerInnerComponent_0.first;
    this.init(([] as any[]),[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9
    ]
    ,[
      disposable_0,
      disposable_1
    ]
    ,[
      subscription_0,
      subscription_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.DayPickerComponent) && (3 === requestNodeIndex))) { return this._DayPickerComponent_3_4.context; }
    if (((token === import18.MonthPickerComponent) && (5 === requestNodeIndex))) { return this._MonthPickerComponent_5_4.context; }
    if (((token === import19.YearPickerComponent) && (7 === requestNodeIndex))) { return this._YearPickerComponent_7_4.context; }
    if (((token === import20.DatePickerInnerComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._DatePickerInnerComponent_1_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.datepickerMode;
    this._DatePickerInnerComponent_1_4.check_datepickerMode(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.startingDay;
    this._DatePickerInnerComponent_1_4.check_startingDay(currVal_1_0_1,throwOnChange,false);
    const currVal_1_0_2:any = this.context.yearRange;
    this._DatePickerInnerComponent_1_4.check_yearRange(currVal_1_0_2,throwOnChange,false);
    const currVal_1_0_3:any = this.context.minDate;
    this._DatePickerInnerComponent_1_4.check_minDate(currVal_1_0_3,throwOnChange,false);
    const currVal_1_0_4:any = this.context.maxDate;
    this._DatePickerInnerComponent_1_4.check_maxDate(currVal_1_0_4,throwOnChange,false);
    const currVal_1_0_5:any = this.context.minMode;
    this._DatePickerInnerComponent_1_4.check_minMode(currVal_1_0_5,throwOnChange,false);
    const currVal_1_0_6:any = this.context.maxMode;
    this._DatePickerInnerComponent_1_4.check_maxMode(currVal_1_0_6,throwOnChange,false);
    const currVal_1_0_7:any = this.context.showWeeks;
    this._DatePickerInnerComponent_1_4.check_showWeeks(currVal_1_0_7,throwOnChange,false);
    const currVal_1_0_8:any = this.context.formatDay;
    this._DatePickerInnerComponent_1_4.check_formatDay(currVal_1_0_8,throwOnChange,false);
    const currVal_1_0_9:any = this.context.formatMonth;
    this._DatePickerInnerComponent_1_4.check_formatMonth(currVal_1_0_9,throwOnChange,false);
    const currVal_1_0_10:any = this.context.formatYear;
    this._DatePickerInnerComponent_1_4.check_formatYear(currVal_1_0_10,throwOnChange,false);
    const currVal_1_0_11:any = this.context.formatDayHeader;
    this._DatePickerInnerComponent_1_4.check_formatDayHeader(currVal_1_0_11,throwOnChange,false);
    const currVal_1_0_12:any = this.context.formatDayTitle;
    this._DatePickerInnerComponent_1_4.check_formatDayTitle(currVal_1_0_12,throwOnChange,false);
    const currVal_1_0_13:any = this.context.formatMonthTitle;
    this._DatePickerInnerComponent_1_4.check_formatMonthTitle(currVal_1_0_13,throwOnChange,false);
    const currVal_1_0_14:any = this.context.onlyCurrentMonth;
    this._DatePickerInnerComponent_1_4.check_onlyCurrentMonth(currVal_1_0_14,throwOnChange,false);
    const currVal_1_0_15:any = this.context.shortcutPropagation;
    this._DatePickerInnerComponent_1_4.check_shortcutPropagation(currVal_1_0_15,throwOnChange,false);
    const currVal_1_0_16:any = this.context.customClass;
    this._DatePickerInnerComponent_1_4.check_customClass(currVal_1_0_16,throwOnChange,false);
    const currVal_1_0_17:any = this.context.monthColLimit;
    this._DatePickerInnerComponent_1_4.check_monthColLimit(currVal_1_0_17,throwOnChange,false);
    const currVal_1_0_18:any = this.context.yearColLimit;
    this._DatePickerInnerComponent_1_4.check_yearColLimit(currVal_1_0_18,throwOnChange,false);
    const currVal_1_0_19:any = this.context.dateDisabled;
    this._DatePickerInnerComponent_1_4.check_dateDisabled(currVal_1_0_19,throwOnChange,false);
    const currVal_1_0_20:any = this.context.initDate;
    this._DatePickerInnerComponent_1_4.check_initDate(currVal_1_0_20,throwOnChange,false);
    const currVal_1_0_21:any = this.context.activeDate;
    this._DatePickerInnerComponent_1_4.check_activeDate(currVal_1_0_21,throwOnChange,false);
    this._DatePickerInnerComponent_1_4.detectChangesInInputProps(this,this._el_1,throwOnChange);
    this._DayPickerComponent_3_4.detectChangesInInputProps(this,this._el_3,throwOnChange);
    this._MonthPickerComponent_5_4.detectChangesInInputProps(this,this._el_5,throwOnChange);
    this._YearPickerComponent_7_4.detectChangesInInputProps(this,this._el_7,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._DatePickerInnerComponent_1_4.detectChangesInHostProps(this,this._el_1,throwOnChange);
    this._DayPickerComponent_3_4.detectChangesInHostProps(this,this._el_3,throwOnChange);
    this._MonthPickerComponent_5_4.detectChangesInHostProps(this,this._el_5,throwOnChange);
    this._YearPickerComponent_7_4.detectChangesInHostProps(this,this._el_7,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_update_1_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_1_0:any = ((<any>this.context.onUpdate($event)) !== false);
    return (true && pd_1_0);
  }
  private _handle_selectionDone_1_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_1_0:any = ((<any>this.context.onSelectionDone($event)) !== false);
    return (true && pd_1_0);
  }
}
export function viewFactory_DatePickerComponent0(viewUtils:import2.ViewUtils,parentInjector:import7.Injector,declarationEl:import5.AppElement):import3.AppView<import0.DatePickerComponent> {
  if ((renderType_DatePickerComponent === (null as any))) { (renderType_DatePickerComponent = viewUtils.createRenderComponentType('',0,import10.ViewEncapsulation.None,styles_DatePickerComponent,{})); }
  return new _View_DatePickerComponent0(viewUtils,parentInjector,declarationEl);
}