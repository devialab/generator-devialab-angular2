/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from 'ng2-bootstrap/components/accordion/accordion.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
export class Wrapper_AccordionComponent {
  context:import0.AccordionComponent;
  changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor() {
    this.changed = false;
    this.context = new import0.AccordionComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  check_closeOthers(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.closeOthers = currValue;
      this._expr_0 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = this.context.addClass;
    if (import2.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'panel-group',currVal_1);
      this._expr_1 = currVal_1;
    }
  }
}
var renderType_AccordionComponent_Host:import4.RenderComponentType = (null as any);
class _View_AccordionComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _AccordionComponent_0_4:Wrapper_AccordionComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_AccordionComponent_Host0,renderType_AccordionComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'accordion',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AccordionComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._AccordionComponent_0_4 = new Wrapper_AccordionComponent();
    this._appEl_0.initComponent(this._AccordionComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._AccordionComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AccordionComponent) && (0 === requestNodeIndex))) { return this._AccordionComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._AccordionComponent_0_4.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._AccordionComponent_0_4.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_AccordionComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_AccordionComponent_Host === (null as any))) { (renderType_AccordionComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_AccordionComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const AccordionComponentNgFactory:import9.ComponentFactory<import0.AccordionComponent> = new import9.ComponentFactory<import0.AccordionComponent>('accordion',viewFactory_AccordionComponent_Host0,import0.AccordionComponent);
const styles_AccordionComponent:any[] = ([] as any[]);
var renderType_AccordionComponent:import4.RenderComponentType = (null as any);
class _View_AccordionComponent0 extends import3.AppView<import0.AccordionComponent> {
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_AccordionComponent0,renderType_AccordionComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.renderer.projectNodes(parentRenderNode,import2.flattenNestedViewRenderNodes(this.projectableNodes[0]));
    this.init(([] as any[]),([] as any[]),([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_AccordionComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.AccordionComponent> {
  if ((renderType_AccordionComponent === (null as any))) { (renderType_AccordionComponent = viewUtils.createRenderComponentType('',1,import8.ViewEncapsulation.None,styles_AccordionComponent,{})); }
  return new _View_AccordionComponent0(viewUtils,parentInjector,declarationEl);
}